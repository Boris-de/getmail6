#!/usr/bin/env python2.5

import sys
if sys.version_info[:2] < (2, 5):
    raise SystemExit('getmail version 5 requires Python version 2.5 or later')

import os.path
import time
import ConfigParser
import poplib
import imaplib
import pprint
from optparse import OptionParser, OptionGroup
import socket
import logging
import traceback

try:
    import getmailcore.logging
    from getmailcore import __version__, retrievers, destinations, filters
    from getmailcore.exceptions import *
    from getmailcore.utilities import (asBool, format_params,
        stripAddress, expandUserVars)
except ImportError, o:
    sys.stderr.write("""
getmail encountered an ImportError trying to load getmailcore.  Ensure getmail
is installed properly; consult the documentation for details.

The ImportError was: %s
""" % o)
    sys.exit(127)

#
# Data
#

options_bool = (
    'read_all',
    'delete',
    'delivered_to',
    'received',
    'message_log_verbose',
    'message_log_syslog',
    'trace',
)
options_int = (
    'delete_after',
    'max_message_size',
    'max_messages_per_session',
    'max_bytes_per_session',
    'verbose',
)
options_str = (
    'message_log',
)

defaults = {
    'getmaildir' : '~/.getmail/',
    'rcfile' : 'getmailrc',

    'verbose' : 1,
    'read_all' : True,
    'delete' : False,
    'delete_after' : 0,
    'max_message_size' : 0,
    'max_messages_per_session' : 0,
    'max_bytes_per_session' : 0,
    'delivered_to' : True,
    'received' : True,
    'message_log' : None,
    'message_log_verbose' : False,
    'message_log_syslog' : False,
    'logfile' : None,
    'trace' : False,
}

getmailcore.logging.setup(defaults)
log = getmailcore.logging.getLogger('')
msglog = logging.getLogger('msglog')

#######################################
def logboth(level, msg, *args, **kwargs):
    log.log(level, msg, *args, **kwargs)
    msglog.log(level, msg, *args, **kwargs)

#######################################
def blurb():
    log.info('getmail version %s', __version__)
    log.info('Copyright (C) 1998-2010 Charles Cazabon.  Licensed under the '
             'GNU GPL version 2.')

#######################################
def go(configs):
    summary = []
    for (configfile, retriever, _filters, destination, options) in configs:
        getmailcore.logging.setup(options)
        oplevel = options['verbose']
        logverbose = options['message_log_verbose']
        now = int(time.time())
        msgs_retrieved = 0
        bytes_retrieved = 0
        msgs_skipped = 0
        try:
            logboth(logging.INFO, 'Initializing %s:', retriever)
            retriever.initialize()
            destination.retriever_info(retriever)
            nummsgs = len(retriever)
            fmtlen = len(str(nummsgs))
            for (msgnum, msgid) in enumerate(retriever):
                log.debug('  message %s ...', msgid)
                msgnum += 1
                retrieve = False
                reason = 'seen'
                delete = False
                timestamp = retriever.oldmail.get(msgid, None)
                size = retriever.getmsgsize(msgid)
                info = ('msg %*d/%*d (%d bytes)'
                        % (fmtlen, msgnum, fmtlen, nummsgs, size))
                log.info(info)
                logline = '%s msgid %s' % (info, msgid)
                if options['read_all'] or timestamp is None:
                    retrieve = True
                if (options['max_message_size']
                        and size > options['max_message_size']):
                    retrieve = False
                    reason = 'oversized'
                if (options['max_bytes_per_session']
                        and (bytes_retrieved + size)
                            > options['max_bytes_per_session']):
                    retrieve = False
                    reason = 'would surpass max_bytes_per_session'
                try:
                    if retrieve:
                        try:
                            msg = retriever.getmsg(msgid)
                        except getmailRetrievalError, o:
                            logboth(logging.ERROR, 
                                'Retrieval error: server for %s is broken; '
                                'offered message %s but failed to provide it.  '
                                'Please notify the administrator of the '
                                'server.  Skipping message...', retriever, msgid
                            )
                            continue
                        msgs_retrieved += 1
                        bytes_retrieved += size
                        logline += (' from <%s>'
                                    % stripAddress(msg.sender))
                        if msg.recipient is not None:
                            logline += (' to <%s>'
                                        % stripAddress(msg.recipient))

                        for mail_filter in _filters:
                            log.debug('    passing to filter %s', mail_filter)
                            msg = mail_filter.filter_message(msg, retriever)
                            if msg is None:
                                log.debug('    dropped by filter %s', 
                                          mail_filter)
                                logline += (' dropped by filter %s', 
                                            mail_filter)
                                retriever.delivered(msgid)
                                break

                        if msg is not None:
                            r = destination.deliver_message(msg,
                                options['delivered_to'], options['received'])
                            log.debug('    delivered to %s', r)
                            logline += (' delivered to %s' % r)
                            retriever.delivered(msgid)
                        if options['delete']:
                            delete = True
                    else:
                        logline += ' not retrieved (%s)' % reason
                        msgs_skipped += 1
                        log.debug('    not retrieving (timestamp %s)', 
                                  timestamp)

                    msglog.info(logline)

                    if (options['delete_after'] and timestamp
                            and (now - timestamp) / 86400
                                >= options['delete_after']):
                        logboth(
                            logging.DEBUG, 
                            '    older than %d days (%s seconds), will delete',
                            options['delete_after'], (now - timestamp)
                        )
                        delete = True

                    if options['delete'] and timestamp:
                        logboth(logging.DEBUG, '    will delete')
                        delete = True

                    if not retrieve and timestamp is None:
                        # We haven't retrieved this message.  Don't delete it.
                        log.debug('    not yet retrieved, not deleting')
                        delete = False

                    if delete:
                        retriever.delmsg(msgid)
                        logboth(logging.INFO, '    deleted')

                except getmailDeliveryError, o:
                    logboth(logging.ERROR, 'Delivery error (%s)', o)

                except getmailFilterError, o:
                    logboth(logging.ERROR, 'Filter error (%s)', o)

#                if (retrieve or delete or oplevel > 1):
#                    log.info('  %s' % info)

                if (options['max_messages_per_session']
                        and msgs_retrieved >=
                        options['max_messages_per_session']):
                    log.debug('hit max_messages_per_session (%d), stopping',
                              options['max_messages_per_session'])
                    raise StopIteration('max_messages_per_session %d'
                                        % options['max_messages_per_session'])

        except StopIteration:
            pass

        except getmailSSLError, o:
            log.error('%s: SSL error (%s)', configfile, o)

        except socket.timeout, o:
            retriever.write_oldmailfile(forget_deleted=False)
            if type(o) == tuple and len(o) > 1:
                o = o[1]
            log.error('%s: timeout (%s)' % (configfile, o))

        except (poplib.error_proto, imaplib.IMAP4.abort), o:
            retriever.write_oldmailfile(forget_deleted=False)
            log.error('%s: protocol error (%s)' % (configfile, o))

        except socket.gaierror, o:
            retriever.write_oldmailfile(forget_deleted=False)
            if type(o) == tuple and len(o) > 1:
                o = o[1]
            log.error('%s: error resolving name (%s)' % (configfile, o))

        except socket.error, o:
            retriever.write_oldmailfile(forget_deleted=False)
            if type(o) == tuple and len(o) > 1:
                o = o[1]
            log.error('%s: socket error (%s)' % (configfile, o))

        except getmailOperationError, o:
            retriever.write_oldmailfile(forget_deleted=False)
            log.error('%s: operation error (%s)' % (configfile, o))

        summary.append(
            (retriever, msgs_retrieved, bytes_retrieved, msgs_skipped)
        )

        logboth(logging.INFO, '  %d messages (%d bytes) retrieved, %d skipped',
                msgs_retrieved, bytes_retrieved, msgs_skipped)
        log.debug('retriever %s finished' % retriever)
        try:
            retriever.quit()
        except getmailOperationError, o:
            log.debug('%s: operation error during quit (%s)'
                      % (configfile, o))

    if sum([i for (unused, i, unused, unused) in summary]) and oplevel > 1:
        logboth(logging.INFO, 'Summary:')
        for (retriever, msgs_retrieved, bytes_retrieved, unused) in summary:
            logboth(logging.INFO, 'Retrieved %d messages (%s bytes) from %s',
                    msgs_retrieved, bytes_retrieved, retriever)

#######################################
def main():
    try:
        parser = OptionParser(version='%%prog %s' % __version__)
        parser.add_option(
            '-g', '--getmaildir',
            dest='getmaildir', action='store', default=defaults['getmaildir'],
            help='look in DIR for config/data files', metavar='DIR'
        )
        parser.add_option(
            '-r', '--rcfile',
            dest='rcfile', action='append', default=[],
            help='load configuration from FILE (may be given multiple times)',
            metavar='FILE'
        )
        parser.add_option(
            '--dump',
            dest='dump_config', action='store_true', default=False,
            help='dump configuration and exit (debugging)'
        )
        parser.add_option(
            '--trace',
            dest='trace', action='store_true', default=defaults['trace'],
            help='print extended trace information (extremely verbose)'
        )
        overrides = OptionGroup(
            parser, 'Overrides',
            'The following options override those specified in any '
                'getmailrc file.'
        )
        overrides.add_option(
            '-v', '--verbose',
            dest='override_verbose', action='count',
            help='operate more verbosely (may be given multiple times)'
        )
        overrides.add_option(
            '-q', '--quiet',
            dest='override_verbose', action='store_const',
            const=0,
            help='operate quietly (only report errors)'
        )
        overrides.add_option(
            '-d', '--delete',
            dest='override_delete', action='store_true',
            help='delete messages from server after retrieving'
        )
        overrides.add_option(
            '-l', '--dont-delete',
            dest='override_delete', action='store_false',
            help='do not delete messages from server after retrieving'
        )
        overrides.add_option(
            '-a', '--all',
            dest='override_read_all', action='store_true',
            help='retrieve all messages'
        )
        overrides.add_option(
            '-n', '--new',
            dest='override_read_all', action='store_false',
            help='retrieve only unread messages'
        )
        parser.add_option_group(overrides)

        (options, args) = parser.parse_args(sys.argv[1:])

        # Basic initial logging config, just for introductory messages
        initialLogLevel = options.override_verbose
        if initialLogLevel is None:
            initialLogLevel = defaults['verbose']
        initialLogSettings = {
            'verbose' : initialLogLevel,
            'message_log' : None,
            'message_log_syslog' : None,
            'trace' : None,
        }
        getmailcore.logging.setup(initialLogSettings)
        
        blurb()

        if args:
            raise getmailOperationError('unknown argument(s) %s ; try --help'
                                        % args)

        if options.trace:
            #log.clearhandlers()
            pass

        if not options.rcfile:
            options.rcfile.append(defaults['rcfile'])

        s = ''
        for attr in dir(options):
            if attr.startswith('_'):
                continue
            if s:
                s += ','
            s += '%s="%s"' % (attr, pprint.pformat(getattr(options, attr)))
        log.debug('parsed options:  %s' % s)

        getmaildir_type = 'Default'
        if options.getmaildir != defaults['getmaildir']:
            getmaildir_type = 'Specified'
        getmaildir = expandUserVars(options.getmaildir)
        if not os.path.exists(getmaildir):
            raise getmailOperationError(
                '%s config/data dir "%s" does not exist - create '
                'or specify alternate directory with --getmaildir option'
                % (getmaildir_type, getmaildir)
            )
        if not os.path.isdir(getmaildir):
            raise getmailOperationError(
                '%s config/data dir "%s" is not a directory - fix '
                'or specify alternate directory with --getmaildir option'
                % (getmaildir_type, getmaildir)
            )
        if not os.access(getmaildir, os.W_OK):
            raise getmailOperationError(
                '%s config/data dir "%s" is not writable - fix permissions '
                'or specify alternate directory with --getmaildir option'
                % (getmaildir_type, getmaildir)
            )

        configs = []
        for filename in options.rcfile:
            path = os.path.join(os.path.expanduser(options.getmaildir),
                                filename)
            log.debug('processing rcfile %s' % path)
            if not os.path.exists(path):
                raise getmailOperationError('configuration file %s does '
                                            'not exist' % path)
            elif not os.path.isfile(path):
                raise getmailOperationError('%s is not a file' % path)
            f = open(path, 'rb')
            config = {
                'verbose' : defaults['verbose'],
                'read_all' : defaults['read_all'],
                'delete' : defaults['delete'],
                'delete_after' : defaults['delete_after'],
                'max_message_size' : defaults['max_message_size'],
                'max_messages_per_session' :
                    defaults['max_messages_per_session'],
                'max_bytes_per_session' :
                    defaults['max_bytes_per_session'],
                'delivered_to' : defaults['delivered_to'],
                'received' : defaults['received'],
                'logfile' : defaults['logfile'],
                'message_log' : defaults['message_log'],
                'message_log_verbose' : defaults['message_log_verbose'],
                'message_log_syslog' : defaults['message_log_syslog'],
                'trace' : options.trace,
            }
            # Python's ConfigParser .getboolean() still can't handle actual
            # boolean values in the defaults as of Python 2.5.  I submitted
            # a patch; they said they fixed it a different way.
            # Don't know if they actually did, as it still barfs for me.
            # Hack around it by passing strings as the default values for any
            # bools.
            parserdefaults = config.copy()
            for (key, value) in parserdefaults.items():
                if type(value) == bool:
                    parserdefaults[key] = str(value)
            try:
                configparser = ConfigParser.RawConfigParser(parserdefaults)
                configparser.readfp(f, path)
                for option in options_bool:
                    log.debug('  looking for option %s ... ' % option)
                    if configparser.has_option('options', option):
                        log.debug('got "%s"'
                                  % configparser.get('options', option))
                        try:
                            config[option] = configparser.getboolean(
                                'options', option
                            )
                            log.debug('-> %s' % config[option])
                        except ValueError:
                            raise getmailConfigurationError(
                                'configuration file %s incorrect (option %s '
                                'must be boolean, not %s)'
                                % (path, option,
                                   configparser.get('options', option))
                            )
                    else:
                        log.debug('not found')
                    log.debug('')

                for option in options_int:
                    log.debug('  looking for option %s ... ' % option)
                    if configparser.has_option('options', option):
                        log.debug(
                            'got "%s"' % configparser.get('options', option)
                        )
                        try:
                            config[option] = configparser.getint('options',
                                                                 option)
                            log.debug('-> %s' % config[option])
                        except ValueError:
                            raise getmailConfigurationError(
                                'configuration file %s incorrect (option %s '
                                'must be integer, not %s)'
                                % (path, option,
                                   configparser.get('options', option))
                            )
                    else:
                        log.debug('not found')
                    log.debug('')

                for option in options_str:
                    log.debug('  looking for option %s ... ' % option)
                    if configparser.has_option('options', option):
                        log.debug('got "%s"'
                                  % configparser.get('options', option))
                        config[option] = configparser.get('options', option)
                        log.debug('-> %s' % config[option])
                    else:
                        log.debug('not found')
                    log.debug('')

                # Clear out the ConfigParser defaults before processing further
                # sections
                configparser._defaults = {}

                # Retriever
                log.debug('  getting retriever')
                retriever_type = configparser.get('retriever', 'type')
                log.debug('    type="%s"' % retriever_type)
                retriever_func = getattr(retrievers, retriever_type)
                if not hasattr(retriever_func, '__call__'):
                    raise getmailConfigurationError(
                        'configuration file %s specifies incorrect '
                        'retriever type (%s)'
                        % (path, retriever_type)
                    )
                retriever_args = {
                    'getmaildir' : options.getmaildir,
                    'configparser' : configparser,
                }
                for (name, value) in configparser.items('retriever'):
                    if name in ('type', 'configparser'):
                        continue
                    if name == 'password':
                        log.debug('    parameter %s=*' % name)
                    else:
                        log.debug('    parameter %s="%s"' % (name, value))
                    retriever_args[name] = value
                log.debug('    instantiating retriever %s with args %s'
                          % (retriever_type, format_params(retriever_args)))
                try:
                    retriever = retriever_func(**retriever_args)
                    log.debug('    checking retriever configuration for %s'
                              % retriever)
                    retriever.checkconf()
                except getmailOperationError, o:
                    log.error('Error initializing retriever: %s' % o)
                    continue

                # Destination
                log.debug('  getting destination')
                destination_type = configparser.get('destination', 'type')
                log.debug('    type="%s"' % destination_type)
                destination_func = getattr(destinations, destination_type)
                if not hasattr(destination_func, '__call__'):
                    raise getmailConfigurationError(
                        'configuration file %s specifies incorrect destination '
                        'type (%s)'
                        % (path, destination_type)
                    )
                destination_args = {'configparser' : configparser}
                for (name, value) in configparser.items('destination'):
                    if name in ('type', 'configparser'):
                        continue
                    if name == 'password':
                        log.debug('    parameter %s=*' % name)
                    else:
                        log.debug('    parameter %s="%s"' % (name, value))
                    destination_args[name] = value
                log.debug('    instantiating destination %s with args %s'
                          % (destination_type, format_params(destination_args)))
                destination = destination_func(**destination_args)

                # Filters
                log.debug('  getting filters')
                _filters = []
                filtersections =  [
                    section.lower() for section in configparser.sections()
                    if section.lower().startswith('filter')
                ]
                for section in sorted(filtersections):
                    log.debug('    processing filter section %s' % section)
                    filter_type = configparser.get(section, 'type')
                    log.debug('      type="%s"' % filter_type)
                    filter_func = getattr(filters, filter_type)
                    if not hasattr(filter_func, '__call__'):
                        raise getmailConfigurationError(
                            'configuration file %s specifies incorrect filter '
                            'type (%s)'
                            % (path, filter_type)
                        )
                    filter_args = {'configparser' : configparser}
                    for (name, value) in configparser.items(section):
                        if name in ('type', 'configparser'):
                            continue
                        if name == 'password':
                            log.debug('    parameter %s=*' % name)
                        else:
                            log.debug('    parameter %s="%s"' % (name, value))
                        filter_args[name] = value
                    log.debug('      instantiating filter %s with args %s'
                              % (filter_type, format_params(filter_args)))
                    mail_filter = filter_func(**filter_args)
                    _filters.append(mail_filter)

            except ConfigParser.NoSectionError, o:
                raise getmailConfigurationError(
                    'configuration file %s missing section (%s)' % (path, o)
                )
            except ConfigParser.NoOptionError, o:
                raise getmailConfigurationError(
                    'configuration file %s missing option (%s)' % (path, o)
                )
            except (ConfigParser.DuplicateSectionError,
                    ConfigParser.InterpolationError,
                    ConfigParser.MissingSectionHeaderError,
                    ConfigParser.ParsingError), o:
                raise getmailConfigurationError(
                    'configuration file %s incorrect (%s)' % (path, o)
                )
            except getmailConfigurationError, o:
                raise getmailConfigurationError(
                    'configuration file %s incorrect (%s)' % (path, o)
                )

            # Apply overrides from commandline
            for option in ('read_all', 'delete', 'verbose'):
                val = getattr(options, 'override_%s' % option)
                if val is not None:
                    log.debug('overriding option %s from commandline %s'
                              % (option, val))
                    config[option] = val

            if config['verbose'] > 3:
                config['verbose'] = 3

#            if not options.trace and config['verbose'] == 0:
#                log.clearhandlers()
#                log.addhandler(sys.stderr, logging.WARNING)

            configs.append((os.path.basename(filename), retriever, _filters,
                            destination, config.copy()))

        if options.dump_config:
            getmailcore.logging.setup(defaults)
            blurb()
            sys.stdout.write('getmail configuration:\n')
            sys.stdout.write('  getmail version %s\n' % __version__)
            lines = [line.strip() for line in sys.version.splitlines()]
            sys.stdout.write('  Python version %s\n' % lines[0])
            for line in lines[1:]:
                sys.stdout.write('    %s\n' % line)
            for (filename, retriever, _filters, destination, config) in configs:
                sys.stdout.write('retriever:  %s\n' % retriever.configuration())
                for _filter in _filters:
                    sys.stdout.write('  filter:  %s\n' 
                                     % _filter.configuration())
                sys.stdout.write('  destination:  %s\n' 
                                 % destination.configuration())
                sys.stdout.write('  options:\n')
                for option in sorted(config):
                    sys.stdout.write('    %s : %s\n' % (option, config[option]))
                sys.stdout.write('\n')
            sys.exit()

        # Go!
        go(configs)

    except KeyboardInterrupt:
        log.warning('Operation aborted by user (keyboard interrupt)')
        sys.exit(0)
    except getmailInvocationError, o:
        log.error('Invocation error: %s' % o)
        sys.exit(1)
    except getmailConfigurationError, o:
        log.error('Configuration error: %s' % o)
        sys.exit(2)
    except getmailOperationError, o:
        log.error('Error: %s' % o)
        sys.exit(3)
    except Exception, o:
        r = [
            '',
            'Exception: please read docs/BUGS and include the following '
                'information',
            'in any bug report:',
            '',
            '  getmail version %s' % __version__,
            '  Python version %s' % sys.version,
            'Unhandled exception follows:'
        ]
        (exc_type, value, tb) = sys.exc_info()
        tblist = (traceback.format_tb(tb, None)
                  + traceback.format_exception_only(exc_type, value))
        if type(tblist) != list:
            tblist = [tblist]
        for line in tblist:
            r.append('  %s' % line.rstrip())
        r.extend([
            '', 
            'Please also include configuration information from running '
                'getmail with ',
            'your normal options plus "--dump".'
        ])
        log.critical('\n'.join(r))
        sys.exit(4)

#######################################
if __name__ == '__main__':
    main()
